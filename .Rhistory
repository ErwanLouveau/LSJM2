delta1=~event1,
delta2=~event2,
timeVar = "visit",
Time_T =~time,
formSlopeFixed =~1,
formSlopeRandom =~1,
index_beta_slope = c(2),
index_b_slope = c(2),
nproc = 5,
S1 = 1000,
S2 = 1000, print.info = T, file = "",
epsa = 0.9, epsb = 0.9, epsd = 1.2)
summary.lsjm_classicCR(lsjmCovDepSingle)
lsjmCovDepSingle <- lsjm(example,
survival_type = 'Single',
formSurv_01=~category,
formSurv_02=~category,
sharedtype_01 = c("current value"),
sharedtype_02 = c("current value", "slope"),
hazardBase_01 = "Splines",
hazardBase_02 = "Weibull",
delta1=~event1,
delta2=~event2,
timeVar = "visit",
Time_T =~time,
formSlopeFixed =~1,
formSlopeRandom =~1,
index_beta_slope = c(2),
index_b_slope = c(2),
nproc = 5,
S1 = 1000,
S2 = 1000, print.info = T, file = "",
epsa = 0.9, epsb = 0.9, epsd = 1.2)
summary.lsj
summary.lsjm_classicSingle(lsjmCovDepSingle)
devtools::document()
summary.lsjm_classicSingle(lsjmCovDepSingle)
nb.alpha_01
x$control$nb.alpha
devtools::document()
lsjmCovDepSingle <- lsjm(example,
survival_type = 'Single',
formSurv_01=~category,
formSurv_02=~category,
sharedtype_01 = c("current value"),
sharedtype_02 = c("current value", "slope"),
hazardBase_01 = "Splines",
hazardBase_02 = "Weibull",
delta1=~event1,
delta2=~event2,
timeVar = "visit",
Time_T =~time,
formSlopeFixed =~1,
formSlopeRandom =~1,
index_beta_slope = c(2),
index_b_slope = c(2),
nproc = 5,
S1 = 1000,
S2 = 1000, print.info = T, file = "",
epsa = 0.9, epsb = 0.9, epsd = 1.2)
summary.lsjm_classicSingle(lsjmCovDepSingle)
lsjmCovDepSingle <- lsjm(example,
survival_type = 'Single',
formSurv_01=~category,
formSurv_02=~category,
sharedtype_01 = c("current value"),
sharedtype_02 = c("current value", "slope"),
hazardBase_01 = "Exponential",
hazardBase_02 = "Weibull",
delta1=~event1,
delta2=~event2,
timeVar = "visit",
Time_T =~time,
formSlopeFixed =~1,
formSlopeRandom =~1,
index_beta_slope = c(2),
index_b_slope = c(2),
nproc = 5,
S1 = 1000,
S2 = 1000, print.info = T, file = "",
epsa = 0.9, epsb = 0.9, epsd = 1.2)
summary.lsjm_classicSingle(lsjmCovDepSingle)
devtools::document()
summary.lsjm_classicSingle(lsjmCovDepSingle)
e1_bas_tab
devtools::document()
summary.lsjm_classicSingle(lsjmCovDepSingle)
example$control$formFixed[[2]]
re <- ranef(example)
re$cv.Pred
summary(example)
Objectlsmm <- example
Objectranef <- re
formFixed <- Objectlsmm$control$formFixed
timeVar <- Objectlsmm$control$timeVar
timeVar
Objectlsmm$control$timeVar <- 'visit'
timeVar <- Objectlsmm$control$timeVar
data.long <- Objectlsmm$control$data.long
formFixed
data.long
value.var <- as.character(formFixed[[2]])
value.var
pred.CV <- re$cv.Pred[,3]
timeInterv <- range(data.long[,timeVar])
break.times <- quantile(timeInterv,prob=seq(0,1,length.out=10))
break.times
data.long$window <- cut(data.long[,timeVar], break.times, include.lowest = T)
mean.obs <- by(data.long[,value.var], data.long$window, mean)
sd.obs <- by(data.long[,value.var], data.long$window, sd)
length.obs <- by(data.long[,value.var], data.long$window, length)
IC.inf <- mean.obs - 1.96*sd.obs/sqrt(length.obs)
IC.sup <- mean.obs + 1.96*sd.obs/sqrt(length.obs)
prediction <- cbind(pred.CV, data.long$window)
mean.pred <- by(prediction[,2], prediction[,ncol(prediction)], mean)
obstime.mean <- by(data.long[,timeVar], data.long$window, mean)
df <- cbind(obstime.mean, mean.obs, IC.sup, IC.inf, mean.pred)
obstime.mean
mean.obs
IC.sup
IC.inf
mean.pred
formFixed <- Objectlsmm$control$formFixed
timeVar <- Objectlsmm$control$timeVar
data.long <- Objectlsmm$control$data.long
value.var <- as.character(formFixed[[2]])
pred.CV <- re$cv.Pred[,3]
timeInterv <- range(data.long[,timeVar])
break.times <- quantile(timeInterv,prob=seq(0,1,length.out=10))
data.long$window <- cut(data.long[,timeVar], break.times, include.lowest = T)
data.long$window
mean.obs <- by(data.long[,value.var], data.long$window, mean)
mean.obs
View(data.long)
table(data.long$visit)
break.times <- c(0,0.25,0.5,0.75,1,1.5,2,2.5,3)
data.long$window <- cut(data.long[,timeVar], break.times, include.lowest = T)
mean.obs <- by(data.long[,value.var], data.long$window, mean)
mean.obs
sd.obs <- by(data.long[,value.var], data.long$window, sd)
sd.obs
length.obs <- by(data.long[,value.var], data.long$window, length)
IC.inf <- mean.obs - 1.96*sd.obs/sqrt(length.obs)
IC.sup <- mean.obs + 1.96*sd.obs/sqrt(length.obs)
prediction <- cbind(pred.CV, data.long$window)
mean.pred <- by(prediction[,2], prediction[,ncol(prediction)], mean)
mean.pred
mean.pred <- by(prediction[,1], prediction[,ncol(prediction)], mean)
mean.pred
obstime.mean <- by(data.long[,timeVar], data.long$window, mean)
df <- cbind(obstime.mean, mean.obs, IC.sup, IC.inf, mean.pred)
df <- as.data.frame(df)
df
oldpar <- graphics::par(no.readonly = TRUE) # code line i
on.exit(graphics::par(oldpar)) # code line i + 1
k <- ggplot2::ggplot(df,  ggplot2::aes(obstime.mean, mean.obs, ymin = IC.sup, ymax = IC.inf))
graph.long <- k +  ggplot2::geom_pointrange( ggplot2::aes(ymin = IC.sup, ymax = IC.inf), shape =1) +
ggplot2::geom_point(ggplot2::aes(obstime.mean, mean.pred), size = 3, shape = 17) +
ggplot2::scale_x_continuous(name = "Time") +
ggplot2::scale_y_continuous(name = "Current Value") +
ggplot2::theme(panel.grid.major = ggplot2::element_blank(), panel.grid.minor = ggplot2::element_blank(),
panel.background = ggplot2::element_blank(), axis.line = ggplot2::element_line(colour = "black"))+
ggplot2::ggtitle("Longitudinal goodness-of-fit")
graph.long
devtools::document()
re <- ranef(example)
Objectranef <- re
ID.ind <- 3
ID.ind <- as.vector(ID.ind)
pred.CV <- as.data.frame(re$cv.Pred)
data.long <- Objectlsmm$control$data.long
formFixed <- Objectlsmm$control$formFixed
value.var <- as.character(formFixed[[2]])
graph.traj.ind <- c()
ind <- ID.ind[1]
pred.CV.id <- pred.CV[which(pred.CV$id == ind),]
pred.CV.id$y <- data.long[which(data.long$id == ind), value.var]
pred.CV.id$CI.sup <- pred.CV.id$CV + 1.96*pred.CV.id$Var
pred.CV.id$CI.inf <- pred.CV.id$CV - 1.96*pred.CV.id$Var
traj_ind <- ggplot() +
geom_line(pred.CV.id, mapping = aes(x=time, y=CV, group = id, color = 'Predicted'))+
geom_line(pred.CV.id, mapping = aes(x=time, y=CI.sup, group = id,  color = 'Predicted'))+
geom_line(pred.CV.id, mapping = aes(x=time, y=CI.inf, group = id,  color = 'Predicted'))+
geom_ribbon( pred.CV.id,mapping=
aes(x=time,ymin=CI.inf,ymax=CI.sup), fill="#998ec3", alpha=0.3)+
geom_point(pred.CV.id, mapping = aes(x=time, y=y, group = id,color = "Observed"),shape =17)+
xlab("Time") + ylab("Y") +
facet_wrap(~id, ncol = 3)+
scale_color_manual(name='',
breaks=c('Predicted', 'Observed'),
values=c('Predicted'='#998ec3', 'Observed'='#000000'),
guide = guide_legend(override.aes = list(
linetype = c(rep("solid", 2), "blank"),
shape = c(NA, NA, 17))))+
theme(
panel.background = element_blank(),
legend.position = "bottom",
legend.box = "vertical",
axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10),
panel.grid = element_blank(),
#legend.key = element_blank(),
legend.text = element_text(color = "black", size = 10),
axis.line = element_line(color = "black",
linetype = "solid"),
axis.text = element_text(size = 10, color = "black")
)
library(ggplot2)
traj_ind <- ggplot() +
geom_line(pred.CV.id, mapping = aes(x=time, y=CV, group = id, color = 'Predicted'))+
geom_line(pred.CV.id, mapping = aes(x=time, y=CI.sup, group = id,  color = 'Predicted'))+
geom_line(pred.CV.id, mapping = aes(x=time, y=CI.inf, group = id,  color = 'Predicted'))+
geom_ribbon( pred.CV.id,mapping=
aes(x=time,ymin=CI.inf,ymax=CI.sup), fill="#998ec3", alpha=0.3)+
geom_point(pred.CV.id, mapping = aes(x=time, y=y, group = id,color = "Observed"),shape =17)+
xlab("Time") + ylab("Y") +
facet_wrap(~id, ncol = 3)+
scale_color_manual(name='',
breaks=c('Predicted', 'Observed'),
values=c('Predicted'='#998ec3', 'Observed'='#000000'),
guide = guide_legend(override.aes = list(
linetype = c(rep("solid", 2), "blank"),
shape = c(NA, NA, 17))))+
theme(
panel.background = element_blank(),
legend.position = "bottom",
legend.box = "vertical",
axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10),
panel.grid = element_blank(),
#legend.key = element_blank(),
legend.text = element_text(color = "black", size = 10),
axis.line = element_line(color = "black",
linetype = "solid"),
axis.text = element_text(size = 10, color = "black")
)
traj_ind
ggplot() +
geom_line(pred.CV.id, mapping = aes(x=time, y=CV, group = id, color = 'Predicted'))
+
geom_line(pred.CV.id, mapping = aes(x=time, y=CI.sup, group = id,  color = 'Predicted'))
ggplot() +
geom_line(pred.CV.id, mapping = aes(x=time, y=CV, group = id, color = 'Predicted'))+
geom_line(pred.CV.id, mapping = aes(x=time, y=CI.sup, group = id,  color = 'Predicted'))
ggplot() +
geom_line(pred.CV.id, mapping = aes(x=time, y=CV, group = id, color = 'Predicted'))+
geom_line(pred.CV.id, mapping = aes(x=time, y=CI.sup, group = id,  color = 'Predicted'))+
geom_line(pred.CV.id, mapping = aes(x=time, y=CI.inf, group = id,  color = 'Predicted'))
ggplot() +
geom_line(pred.CV.id, mapping = aes(x=time, y=CV, group = id, color = 'Predicted'))+
geom_line(pred.CV.id, mapping = aes(x=time, y=CI.sup, group = id,  color = 'Predicted'))+
geom_line(pred.CV.id, mapping = aes(x=time, y=CI.inf, group = id,  color = 'Predicted'))+
geom_ribbon( pred.CV.id,mapping=
aes(x=time,ymin=CI.inf,ymax=CI.sup), fill="#998ec3", alpha=0.3)
ggplot() +
geom_line(pred.CV.id, mapping = aes(x=time, y=CV, group = id, color = 'Predicted'))+
geom_line(pred.CV.id, mapping = aes(x=time, y=CI.sup, group = id,  color = 'Predicted'))+
geom_line(pred.CV.id, mapping = aes(x=time, y=CI.inf, group = id,  color = 'Predicted'))+
geom_ribbon( pred.CV.id,mapping=
aes(x=time,ymin=CI.inf,ymax=CI.sup), fill="#998ec3", alpha=0.3)+
geom_point(pred.CV.id, mapping = aes(x=time, y=y, group = id,color = "Observed"),shape =17)
traj_ind <- ggplot() +
geom_line(pred.CV.id, mapping = aes(x=time, y=CV, group = id, color = 'Predicted'))+
geom_line(pred.CV.id, mapping = aes(x=time, y=CI.sup, group = id,  color = 'Predicted'))+
geom_line(pred.CV.id, mapping = aes(x=time, y=CI.inf, group = id,  color = 'Predicted'))+
geom_ribbon( pred.CV.id,mapping=
aes(x=time,ymin=CI.inf,ymax=CI.sup), fill="#998ec3", alpha=0.3)+
geom_point(pred.CV.id, mapping = aes(x=time, y=y, group = id,color = "Observed"),shape =17)+
xlab("Time") + ylab("Y") +
facet_wrap(~id, ncol = 3)+
scale_color_manual(name='',
breaks=c('Predicted', 'Observed'),
values=c('Predicted'='#998ec3', 'Observed'='#000000'),
guide = guide_legend(override.aes = list(
linetype = c(rep("solid", 1), "blank"),
shape = c(NA,  17))))+
theme(
panel.background = element_blank(),
legend.position = "bottom",
legend.box = "vertical",
axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10),
panel.grid = element_blank(),
#legend.key = element_blank(),
legend.text = element_text(color = "black", size = 10),
axis.line = element_line(color = "black",
linetype = "solid"),
axis.text = element_text(size = 10, color = "black")
)
traj_ind
devtools::document()
re <- ranef(example)
devtools::document()
re <- ranef(example)
time.measures
x$control$timeVar
example$control$timeVar <- 'visit'
re <- ranef(example)
devtools::document()
re <- ranef(example)
re
library(LSJM)
load("~/These/Package/FlexVarJM/data/Data_toy.RData")
Data_toy$event1 <- ifelse(Data_toy$event == 1, 1, 0)
Data_toy$event2 <- ifelse(Data_toy$event == 2, 1, 0)
# lsmm - cov-dependent
example <- lsmm(formFixed = y~visit,
formRandom = ~ visit,
formGroup = ~ID,
data.long = Data_toy,
formVar = "classic",
formFixedVar =~visit,
formRandomVar =~visit,
correlated_re = FALSE,
formGroupVisit =~visit,
S1 = 1000,
S2 = 1000,
nproc = 2,
maxiter = 100
)
# lsmm - cov-dependent
example <- lsmm(formFixed = y~visit,
formRandom = ~ visit,
formGroup = ~ID,
timeVar = 'visit',
data.long = Data_toy,
formVar = "classic",
formFixedVar =~visit,
formRandomVar =~visit,
correlated_re = FALSE,
formGroupVisit =~visit,
S1 = 1000,
S2 = 1000,
nproc = 2,
maxiter = 100
)
# lsmm - cov-dependent
example <- lsmm(formFixed = y~visit,
formRandom = ~ visit,
formGroup = ~ID,
timeVar = 'visit',
data.long = Data_toy,
formVar = "classic",
formFixedVar =~visit,
formRandomVar =~visit,
correlated_re = FALSE,
formGroupVisit =~visit,
S1 = 1000,
S2 = 1000,
nproc = 2,
maxiter = 100
)
devtools::document()
# lsmm - cov-dependent
example <- lsmm(formFixed = y~visit,
formRandom = ~ visit,
formGroup = ~ID,
timeVar = 'visit',
data.long = Data_toy,
formVar = "classic",
formFixedVar =~visit,
formRandomVar =~visit,
correlated_re = FALSE,
formGroupVisit =~visit,
S1 = 1000,
S2 = 1000,
nproc = 2,
maxiter = 100
)
lsjmCovDepSingle <- lsjm(example,
survival_type = 'CR',
formSurv_01=~1,
formSurv_02=~category,
sharedtype_01 = c("current value"),
sharedtype_02 = c("current value", "slope"),
hazardBase_01 = "Splines",
hazardBase_02 = "Weibull",
delta1=~event1,
delta2=~event2,
timeVar = "visit",
Time_T =~time,
formSlopeFixed =~1,
formSlopeRandom =~1,
index_beta_slope = c(2),
index_b_slope = c(2),
nproc = 5,
S1 = 1000,
S2 = 1000, print.info = T, file = "",
epsa = 0.9, epsb = 0.9, epsd = 1.2)
lsjmCovDepSingle <- lsjm(example,
survival_type = 'CR',
formSurv_01=~1,
formSurv_02=~category,
sharedtype_01 = c("current value"),
sharedtype_02 = c("current value", "slope"),
hazardBase_01 = "Splines",
hazardBase_02 = "Weibull",
delta1=~event1,
delta2=~event2,
Time_T =~time,
formSlopeFixed =~1,
formSlopeRandom =~1,
index_beta_slope = c(2),
index_b_slope = c(2),
nproc = 5,
S1 = 1000,
S2 = 1000, print.info = T, file = "",
epsa = 0.9, epsb = 0.9, epsd = 1.2)
??coxph
library(LSJM)
# lsmm - cov-dependent
example <- lsmm(formFixed = y~visit,
formRandom = ~ visit,
formGroup = ~ID,
timeVar = 'visit',
data.long = Data_toy,
formVar = "classic",
formFixedVar =~visit,
formRandomVar =~visit,
correlated_re = FALSE,
formGroupVisit =~visit,
S1 = 1000,
S2 = 1000,
nproc = 2,
maxiter = 100
)
load("~/These/Package/FlexVarJM/data/Data_toy.RData")
Data_toy$event1 <- ifelse(Data_toy$event == 1, 1, 0)
Data_toy$event2 <- ifelse(Data_toy$event == 2, 1, 0)
# lsmm - cov-dependent
example <- lsmm(formFixed = y~visit,
formRandom = ~ visit,
formGroup = ~ID,
timeVar = 'visit',
data.long = Data_toy,
formVar = "classic",
formFixedVar =~visit,
formRandomVar =~visit,
correlated_re = FALSE,
formGroupVisit =~visit,
S1 = 1000,
S2 = 1000,
nproc = 2,
maxiter = 100
)
lsjmCovDepSingle <- lsjm(example,
survival_type = 'CR',
formSurv_01=~1,
formSurv_02=~category,
sharedtype_01 = c("current value"),
sharedtype_02 = c("current value", "slope"),
hazardBase_01 = "Splines",
hazardBase_02 = "Weibull",
delta1=~event1,
delta2=~event2,
Time_T =~time,
formSlopeFixed =~1,
formSlopeRandom =~1,
index_beta_slope = c(2),
index_b_slope = c(2),
nproc = 5,
S1 = 1000,
S2 = 1000, print.info = T, file = "",
epsa = 0.9, epsb = 0.9, epsd = 1.2)
lsjmCovDepSingle <- lsjm(example,
survival_type = 'CR',
formSurv_01=~1,
formSurv_02=~1,
sharedtype_01 = c("current value"),
sharedtype_02 = c("current value", "slope"),
hazardBase_01 = "Splines",
hazardBase_02 = "Weibull",
delta1=~event1,
delta2=~event2,
Time_T =~time,
formSlopeFixed =~1,
formSlopeRandom =~1,
index_beta_slope = c(2),
index_b_slope = c(2),
nproc = 5,
S1 = 1000,
S2 = 1000, print.info = T, file = "",
epsa = 0.9, epsb = 0.9, epsd = 1.2)
lsjmCovDepSingle <- lsjm(example,
survival_type = 'CR',
formSurv_01=~1,
formSurv_02=~1,
sharedtype_01 = c("current value"),
sharedtype_02 = c("current value", "slope"),
hazardBase_01 = "Gompertz",
hazardBase_02 = "Exponential",
delta1=~event1,
delta2=~event2,
Time_T =~time,
formSlopeFixed =~1,
formSlopeRandom =~1,
index_beta_slope = c(2),
index_b_slope = c(2),
nproc = 5,
S1 = 1000,
S2 = 1000, print.info = T, file = "",
epsa = 0.9, epsb = 0.9, epsd = 1.2)
usethis::use_git()
arma::dot
install.packages("arma")
install.packages("Rcpp")
install.packages("arma")
?marqLevAlg
library(marqLevAlg)
?marqLevAlg
library(LSJM)
remove.packages("LSJM")
